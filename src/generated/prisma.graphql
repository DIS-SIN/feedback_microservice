type AggregateApp {
  count: Int!
}

type AggregateFeedback {
  count: Int!
}

type App {
  id: ID!
  name: String!
  type: AppType!
  feedback(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feedback!]
}

type AppConnection {
  pageInfo: PageInfo!
  edges: [AppEdge]!
  aggregate: AggregateApp!
}

input AppCreateInput {
  id: ID
  name: String!
  type: AppType!
  feedback: FeedbackCreateManyWithoutAppInput
}

input AppCreateOneWithoutFeedbackInput {
  create: AppCreateWithoutFeedbackInput
  connect: AppWhereUniqueInput
}

input AppCreateWithoutFeedbackInput {
  id: ID
  name: String!
  type: AppType!
}

type AppEdge {
  node: App!
  cursor: String!
}

enum AppOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
}

type AppPreviousValues {
  id: ID!
  name: String!
  type: AppType!
}

type AppSubscriptionPayload {
  mutation: MutationType!
  node: App
  updatedFields: [String!]
  previousValues: AppPreviousValues
}

input AppSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AppWhereInput
  AND: [AppSubscriptionWhereInput!]
  OR: [AppSubscriptionWhereInput!]
  NOT: [AppSubscriptionWhereInput!]
}

enum AppType {
  Web
  Desktop
  Unknown
}

input AppUpdateInput {
  name: String
  type: AppType
  feedback: FeedbackUpdateManyWithoutAppInput
}

input AppUpdateManyMutationInput {
  name: String
  type: AppType
}

input AppUpdateOneRequiredWithoutFeedbackInput {
  create: AppCreateWithoutFeedbackInput
  update: AppUpdateWithoutFeedbackDataInput
  upsert: AppUpsertWithoutFeedbackInput
  connect: AppWhereUniqueInput
}

input AppUpdateWithoutFeedbackDataInput {
  name: String
  type: AppType
}

input AppUpsertWithoutFeedbackInput {
  update: AppUpdateWithoutFeedbackDataInput!
  create: AppCreateWithoutFeedbackInput!
}

input AppWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  type: AppType
  type_not: AppType
  type_in: [AppType!]
  type_not_in: [AppType!]
  feedback_every: FeedbackWhereInput
  feedback_some: FeedbackWhereInput
  feedback_none: FeedbackWhereInput
  AND: [AppWhereInput!]
  OR: [AppWhereInput!]
  NOT: [AppWhereInput!]
}

input AppWhereUniqueInput {
  id: ID
  name: String
}

type BatchPayload {
  count: Long!
}

type Feedback {
  id: ID!
  email: String
  comment: String!
  created: String!
  app: App!
}

type FeedbackConnection {
  pageInfo: PageInfo!
  edges: [FeedbackEdge]!
  aggregate: AggregateFeedback!
}

input FeedbackCreateInput {
  id: ID
  email: String
  comment: String!
  created: String!
  app: AppCreateOneWithoutFeedbackInput!
}

input FeedbackCreateManyWithoutAppInput {
  create: [FeedbackCreateWithoutAppInput!]
  connect: [FeedbackWhereUniqueInput!]
}

input FeedbackCreateWithoutAppInput {
  id: ID
  email: String
  comment: String!
  created: String!
}

type FeedbackEdge {
  node: Feedback!
  cursor: String!
}

enum FeedbackOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  comment_ASC
  comment_DESC
  created_ASC
  created_DESC
}

type FeedbackPreviousValues {
  id: ID!
  email: String
  comment: String!
  created: String!
}

input FeedbackScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  created: String
  created_not: String
  created_in: [String!]
  created_not_in: [String!]
  created_lt: String
  created_lte: String
  created_gt: String
  created_gte: String
  created_contains: String
  created_not_contains: String
  created_starts_with: String
  created_not_starts_with: String
  created_ends_with: String
  created_not_ends_with: String
  AND: [FeedbackScalarWhereInput!]
  OR: [FeedbackScalarWhereInput!]
  NOT: [FeedbackScalarWhereInput!]
}

type FeedbackSubscriptionPayload {
  mutation: MutationType!
  node: Feedback
  updatedFields: [String!]
  previousValues: FeedbackPreviousValues
}

input FeedbackSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FeedbackWhereInput
  AND: [FeedbackSubscriptionWhereInput!]
  OR: [FeedbackSubscriptionWhereInput!]
  NOT: [FeedbackSubscriptionWhereInput!]
}

input FeedbackUpdateInput {
  email: String
  comment: String
  created: String
  app: AppUpdateOneRequiredWithoutFeedbackInput
}

input FeedbackUpdateManyDataInput {
  email: String
  comment: String
  created: String
}

input FeedbackUpdateManyMutationInput {
  email: String
  comment: String
  created: String
}

input FeedbackUpdateManyWithoutAppInput {
  create: [FeedbackCreateWithoutAppInput!]
  delete: [FeedbackWhereUniqueInput!]
  connect: [FeedbackWhereUniqueInput!]
  set: [FeedbackWhereUniqueInput!]
  disconnect: [FeedbackWhereUniqueInput!]
  update: [FeedbackUpdateWithWhereUniqueWithoutAppInput!]
  upsert: [FeedbackUpsertWithWhereUniqueWithoutAppInput!]
  deleteMany: [FeedbackScalarWhereInput!]
  updateMany: [FeedbackUpdateManyWithWhereNestedInput!]
}

input FeedbackUpdateManyWithWhereNestedInput {
  where: FeedbackScalarWhereInput!
  data: FeedbackUpdateManyDataInput!
}

input FeedbackUpdateWithoutAppDataInput {
  email: String
  comment: String
  created: String
}

input FeedbackUpdateWithWhereUniqueWithoutAppInput {
  where: FeedbackWhereUniqueInput!
  data: FeedbackUpdateWithoutAppDataInput!
}

input FeedbackUpsertWithWhereUniqueWithoutAppInput {
  where: FeedbackWhereUniqueInput!
  update: FeedbackUpdateWithoutAppDataInput!
  create: FeedbackCreateWithoutAppInput!
}

input FeedbackWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  created: String
  created_not: String
  created_in: [String!]
  created_not_in: [String!]
  created_lt: String
  created_lte: String
  created_gt: String
  created_gte: String
  created_contains: String
  created_not_contains: String
  created_starts_with: String
  created_not_starts_with: String
  created_ends_with: String
  created_not_ends_with: String
  app: AppWhereInput
  AND: [FeedbackWhereInput!]
  OR: [FeedbackWhereInput!]
  NOT: [FeedbackWhereInput!]
}

input FeedbackWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createApp(data: AppCreateInput!): App!
  updateApp(data: AppUpdateInput!, where: AppWhereUniqueInput!): App
  updateManyApps(data: AppUpdateManyMutationInput!, where: AppWhereInput): BatchPayload!
  upsertApp(where: AppWhereUniqueInput!, create: AppCreateInput!, update: AppUpdateInput!): App!
  deleteApp(where: AppWhereUniqueInput!): App
  deleteManyApps(where: AppWhereInput): BatchPayload!
  createFeedback(data: FeedbackCreateInput!): Feedback!
  updateFeedback(data: FeedbackUpdateInput!, where: FeedbackWhereUniqueInput!): Feedback
  updateManyFeedbacks(data: FeedbackUpdateManyMutationInput!, where: FeedbackWhereInput): BatchPayload!
  upsertFeedback(where: FeedbackWhereUniqueInput!, create: FeedbackCreateInput!, update: FeedbackUpdateInput!): Feedback!
  deleteFeedback(where: FeedbackWhereUniqueInput!): Feedback
  deleteManyFeedbacks(where: FeedbackWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  app(where: AppWhereUniqueInput!): App
  apps(where: AppWhereInput, orderBy: AppOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [App]!
  appsConnection(where: AppWhereInput, orderBy: AppOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AppConnection!
  feedback(where: FeedbackWhereUniqueInput!): Feedback
  feedbacks(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feedback]!
  feedbacksConnection(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeedbackConnection!
  node(id: ID!): Node
}

type Subscription {
  app(where: AppSubscriptionWhereInput): AppSubscriptionPayload
  feedback(where: FeedbackSubscriptionWhereInput): FeedbackSubscriptionPayload
}
